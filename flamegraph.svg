<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="14089"><g><title>chai`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="0.0071%" y="117" width="0.0142%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2571%" y="127.50"></text></g><g><title>chai`csv::deserializer::deserialize_string_record (2 samples, 0.01%)</title><rect x="0.0213%" y="101" width="0.0142%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.2713%" y="111.50"></text></g><g><title>chai`core::str::converts::from_utf8 (2 samples, 0.01%)</title><rect x="0.0213%" y="85" width="0.0142%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="2"/><text x="0.2713%" y="95.50"></text></g><g><title>chai`csv::reader::Reader&lt;R&gt;::read_record (3 samples, 0.02%)</title><rect x="0.0355%" y="101" width="0.0213%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="3"/><text x="0.2855%" y="111.50"></text></g><g><title>chai`csv_core::reader::Reader::read_record (3 samples, 0.02%)</title><rect x="0.0355%" y="85" width="0.0213%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="3"/><text x="0.2855%" y="95.50"></text></g><g><title>chai`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="0.0639%" y="85" width="0.0142%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="2"/><text x="0.3139%" y="95.50"></text></g><g><title>chai`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.09%)</title><rect x="0.0213%" y="117" width="0.0852%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="12"/><text x="0.2713%" y="127.50"></text></g><g><title>chai`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.05%)</title><rect x="0.0568%" y="101" width="0.0497%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="7"/><text x="0.3068%" y="111.50"></text></g><g><title>chai`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.03%)</title><rect x="0.0781%" y="85" width="0.0284%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="4"/><text x="0.3281%" y="95.50"></text></g><g><title>chai`chai::cli::Cli::prepare_file (16 samples, 0.11%)</title><rect x="0.0071%" y="133" width="0.1136%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="16"/><text x="0.2571%" y="143.50"></text></g><g><title>chai`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="0.1845%" y="101" width="0.0284%" height="15" fill="rgb(250,228,42)" fg:x="26" fg:w="4"/><text x="0.4345%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="0.1845%" y="85" width="0.0284%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="4"/><text x="0.4345%" y="95.50"></text></g><g><title>chai`chai::representation::Representation::repr_code (6 samples, 0.04%)</title><rect x="0.2129%" y="101" width="0.0426%" height="15" fill="rgb(216,20,37)" fg:x="30" fg:w="6"/><text x="0.4629%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="0.2555%" y="101" width="0.0142%" height="15" fill="rgb(206,188,39)" fg:x="36" fg:w="2"/><text x="0.5055%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="0.2697%" y="101" width="0.0568%" height="15" fill="rgb(217,207,13)" fg:x="38" fg:w="8"/><text x="0.5197%" y="111.50"></text></g><g><title>chai`chai::representation::Representation::transform_auto_select (24 samples, 0.17%)</title><rect x="0.1632%" y="117" width="0.1703%" height="15" fill="rgb(231,73,38)" fg:x="23" fg:w="24"/><text x="0.4132%" y="127.50"></text></g><g><title>chai`chai::representation::Representation::transform_elements (3 samples, 0.02%)</title><rect x="0.3336%" y="117" width="0.0213%" height="15" fill="rgb(225,20,46)" fg:x="47" fg:w="3"/><text x="0.5836%" y="127.50"></text></g><g><title>chai`core::hash::BuildHasher::hash_one (4 samples, 0.03%)</title><rect x="0.3549%" y="117" width="0.0284%" height="15" fill="rgb(210,31,41)" fg:x="50" fg:w="4"/><text x="0.6049%" y="127.50"></text></g><g><title>chai`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="0.3691%" y="101" width="0.0142%" height="15" fill="rgb(221,200,47)" fg:x="52" fg:w="2"/><text x="0.6191%" y="111.50"></text></g><g><title>chai`core::slice::sort::merge_sort (3 samples, 0.02%)</title><rect x="0.3833%" y="117" width="0.0213%" height="15" fill="rgb(226,26,5)" fg:x="54" fg:w="3"/><text x="0.6333%" y="127.50"></text></g><g><title>chai`chai::encoder::Encoder::new (42 samples, 0.30%)</title><rect x="0.1207%" y="133" width="0.2981%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="42"/><text x="0.3707%" y="143.50"></text></g><g><title>chai`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.03%)</title><rect x="0.4259%" y="117" width="0.0284%" height="15" fill="rgb(235,183,28)" fg:x="60" fg:w="4"/><text x="0.6759%" y="127.50"></text></g><g><title>chai`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="0.4543%" y="117" width="0.0284%" height="15" fill="rgb(221,5,38)" fg:x="64" fg:w="4"/><text x="0.7043%" y="127.50"></text></g><g><title>chai`alloc::raw_vec::finish_grow (10 samples, 0.07%)</title><rect x="0.4897%" y="117" width="0.0710%" height="15" fill="rgb(247,18,42)" fg:x="69" fg:w="10"/><text x="0.7397%" y="127.50"></text></g><g><title>chai`chai::representation::Representation::repr_code (2 samples, 0.01%)</title><rect x="0.5607%" y="117" width="0.0142%" height="15" fill="rgb(241,131,45)" fg:x="79" fg:w="2"/><text x="0.8107%" y="127.50"></text></g><g><title>chai`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.15%)</title><rect x="0.8446%" y="101" width="0.1491%" height="15" fill="rgb(249,31,29)" fg:x="119" fg:w="21"/><text x="1.0946%" y="111.50"></text></g><g><title>chai`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="0.9937%" y="101" width="0.0142%" height="15" fill="rgb(225,111,53)" fg:x="140" fg:w="2"/><text x="1.2437%" y="111.50"></text></g><g><title>chai`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="1.0079%" y="101" width="0.0142%" height="15" fill="rgb(238,160,17)" fg:x="142" fg:w="2"/><text x="1.2579%" y="111.50"></text></g><g><title>chai`__rdl_alloc (2 samples, 0.01%)</title><rect x="1.0221%" y="101" width="0.0142%" height="15" fill="rgb(214,148,48)" fg:x="144" fg:w="2"/><text x="1.2721%" y="111.50"></text></g><g><title>chai`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="1.0363%" y="101" width="0.0142%" height="15" fill="rgb(232,36,49)" fg:x="146" fg:w="2"/><text x="1.2863%" y="111.50"></text></g><g><title>chai`chai::representation::Representation::repr_code (4 samples, 0.03%)</title><rect x="1.0505%" y="101" width="0.0284%" height="15" fill="rgb(209,103,24)" fg:x="148" fg:w="4"/><text x="1.3005%" y="111.50"></text></g><g><title>chai`core::hash::BuildHasher::hash_one (36 samples, 0.26%)</title><rect x="1.0789%" y="101" width="0.2555%" height="15" fill="rgb(229,88,8)" fg:x="152" fg:w="36"/><text x="1.3289%" y="111.50"></text></g><g><title>chai`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.12%)</title><rect x="1.2137%" y="85" width="0.1207%" height="15" fill="rgb(213,181,19)" fg:x="171" fg:w="17"/><text x="1.4637%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.05%)</title><rect x="1.3344%" y="101" width="0.0497%" height="15" fill="rgb(254,191,54)" fg:x="188" fg:w="7"/><text x="1.5844%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (26 samples, 0.18%)</title><rect x="1.3841%" y="101" width="0.1845%" height="15" fill="rgb(241,83,37)" fg:x="195" fg:w="26"/><text x="1.6341%" y="111.50"></text></g><g><title>chai`chai::representation::Representation::transform_new_pair_equivalence (155 samples, 1.10%)</title><rect x="0.5749%" y="117" width="1.1001%" height="15" fill="rgb(233,36,39)" fg:x="81" fg:w="155"/><text x="0.8249%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.11%)</title><rect x="1.5686%" y="101" width="0.1065%" height="15" fill="rgb(226,3,54)" fg:x="221" fg:w="15"/><text x="1.8186%" y="111.50"></text></g><g><title>chai`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="1.7318%" y="101" width="0.0142%" height="15" fill="rgb(245,192,40)" fg:x="244" fg:w="2"/><text x="1.9818%" y="111.50"></text></g><g><title>chai`chai::representation::Representation::repr_code (4 samples, 0.03%)</title><rect x="1.7673%" y="101" width="0.0284%" height="15" fill="rgb(238,167,29)" fg:x="249" fg:w="4"/><text x="2.0173%" y="111.50"></text></g><g><title>chai`core::hash::BuildHasher::hash_one (13 samples, 0.09%)</title><rect x="1.7957%" y="101" width="0.0923%" height="15" fill="rgb(232,182,51)" fg:x="253" fg:w="13"/><text x="2.0457%" y="111.50"></text></g><g><title>chai`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="1.8525%" y="85" width="0.0355%" height="15" fill="rgb(231,60,39)" fg:x="261" fg:w="5"/><text x="2.1025%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="1.8880%" y="101" width="0.0426%" height="15" fill="rgb(208,69,12)" fg:x="266" fg:w="6"/><text x="2.1380%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.09%)</title><rect x="1.9306%" y="101" width="0.0923%" height="15" fill="rgb(235,93,37)" fg:x="272" fg:w="13"/><text x="2.1806%" y="111.50"></text></g><g><title>chai`chai::representation::Representation::transform_pair_equivalence (52 samples, 0.37%)</title><rect x="1.6751%" y="117" width="0.3691%" height="15" fill="rgb(213,116,39)" fg:x="236" fg:w="52"/><text x="1.9251%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="2.0229%" y="101" width="0.0213%" height="15" fill="rgb(222,207,29)" fg:x="285" fg:w="3"/><text x="2.2729%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (24 samples, 0.17%)</title><rect x="2.0441%" y="117" width="0.1703%" height="15" fill="rgb(206,96,30)" fg:x="288" fg:w="24"/><text x="2.2941%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.05%)</title><rect x="2.2145%" y="117" width="0.0497%" height="15" fill="rgb(218,138,4)" fg:x="312" fg:w="7"/><text x="2.4645%" y="127.50"></text></g><g><title>chai`chai::objectives::Objective::new (266 samples, 1.89%)</title><rect x="0.4188%" y="133" width="1.8880%" height="15" fill="rgb(250,191,14)" fg:x="59" fg:w="266"/><text x="0.6688%" y="143.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.04%)</title><rect x="2.2642%" y="117" width="0.0426%" height="15" fill="rgb(239,60,40)" fg:x="319" fg:w="6"/><text x="2.5142%" y="127.50"></text></g><g><title>chai`chai::encoder::Encoder::encode_full (4,694 samples, 33.32%)</title><rect x="2.3139%" y="69" width="33.3168%" height="15" fill="rgb(206,27,48)" fg:x="326" fg:w="4694"/><text x="2.5639%" y="79.50">chai`chai::encoder::Encoder::encode_full</text></g><g><title>chai`chai::representation::Occupation::contains (506 samples, 3.59%)</title><rect x="32.0392%" y="53" width="3.5915%" height="15" fill="rgb(225,35,8)" fg:x="4514" fg:w="506"/><text x="32.2892%" y="63.50">chai..</text></g><g><title>chai`chai::representation::Occupation::contains (308 samples, 2.19%)</title><rect x="52.2251%" y="53" width="2.1861%" height="15" fill="rgb(250,213,24)" fg:x="7358" fg:w="308"/><text x="52.4751%" y="63.50">c..</text></g><g><title>chai`chai::encoder::Encoder::encode_short (2,688 samples, 19.08%)</title><rect x="35.6306%" y="69" width="19.0787%" height="15" fill="rgb(247,123,22)" fg:x="5020" fg:w="2688"/><text x="35.8806%" y="79.50">chai`chai::encoder::Encoder::e..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (42 samples, 0.30%)</title><rect x="54.4112%" y="53" width="0.2981%" height="15" fill="rgb(231,138,38)" fg:x="7666" fg:w="42"/><text x="54.6612%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (41 samples, 0.29%)</title><rect x="54.4183%" y="37" width="0.2910%" height="15" fill="rgb(231,145,46)" fg:x="7667" fg:w="41"/><text x="54.6683%" y="47.50"></text></g><g><title>chai`chai::encoder::Encoder::split (1,802 samples, 12.79%)</title><rect x="54.7093%" y="69" width="12.7901%" height="15" fill="rgb(251,118,11)" fg:x="7708" fg:w="1802"/><text x="54.9593%" y="79.50">chai`chai::encoder:..</text></g><g><title>chai`chai::objectives::Objective::evaluate_partial (4,449 samples, 31.58%)</title><rect x="67.4995%" y="69" width="31.5778%" height="15" fill="rgb(217,147,25)" fg:x="9510" fg:w="4449"/><text x="67.7495%" y="79.50">chai`chai::objectives::Objective::evaluate_partial</text></g><g><title>chai`chai::representation::Occupation::contains (63 samples, 0.45%)</title><rect x="99.0773%" y="69" width="0.4472%" height="15" fill="rgb(247,81,37)" fg:x="13959" fg:w="63"/><text x="99.3273%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (22 samples, 0.16%)</title><rect x="99.5315%" y="69" width="0.1562%" height="15" fill="rgb(209,12,38)" fg:x="14023" fg:w="22"/><text x="99.7815%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.16%)</title><rect x="99.5315%" y="53" width="0.1562%" height="15" fill="rgb(227,1,9)" fg:x="14023" fg:w="22"/><text x="99.7815%" y="63.50"></text></g><g><title>chai`&lt;chai::problem::ElementPlacementProblem as chai::metaheuristics::Metaheuristics&lt;alloc::vec::Vec&lt;usize&gt;,chai::objectives::metric::Metric&gt;&gt;::rank_candidate (13,753 samples, 97.62%)</title><rect x="2.3068%" y="101" width="97.6152%" height="15" fill="rgb(248,47,43)" fg:x="325" fg:w="13753"/><text x="2.5568%" y="111.50">chai`&lt;chai::problem::ElementPlacementProblem as chai::metaheuristics::Metaheuristics&lt;alloc::vec::Vec&lt;usize&gt;,chai::objectives::metric::Metric&gt;&gt;::rank_candidate</text></g><g><title>chai`chai::objectives::Objective::evaluate (13,752 samples, 97.61%)</title><rect x="2.3139%" y="85" width="97.6081%" height="15" fill="rgb(221,10,30)" fg:x="326" fg:w="13752"/><text x="2.5639%" y="95.50">chai`chai::objectives::Objective::evaluate</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.23%)</title><rect x="99.6877%" y="69" width="0.2342%" height="15" fill="rgb(210,229,1)" fg:x="14045" fg:w="33"/><text x="99.9377%" y="79.50"></text></g><g><title>libsystem_platform.dylib`__bzero (33 samples, 0.23%)</title><rect x="99.6877%" y="53" width="0.2342%" height="15" fill="rgb(222,148,37)" fg:x="14045" fg:w="33"/><text x="99.9377%" y="63.50"></text></g><g><title>chai`chai::problem::ElementPlacementProblem::solve (13,756 samples, 97.64%)</title><rect x="2.3068%" y="133" width="97.6365%" height="15" fill="rgb(234,67,33)" fg:x="325" fg:w="13756"/><text x="2.5568%" y="143.50">chai`chai::problem::ElementPlacementProblem::solve</text></g><g><title>chai`chai::metaheuristics::simulated_annealing::solve (13,756 samples, 97.64%)</title><rect x="2.3068%" y="117" width="97.6365%" height="15" fill="rgb(247,98,35)" fg:x="325" fg:w="13756"/><text x="2.5568%" y="127.50">chai`chai::metaheuristics::simulated_annealing::solve</text></g><g><title>chai`core::ptr::drop_in_place&lt;chai::problem::ElementPlacementProblem&gt; (2 samples, 0.01%)</title><rect x="99.9503%" y="133" width="0.0142%" height="15" fill="rgb(247,138,52)" fg:x="14082" fg:w="2"/><text x="100.2003%" y="143.50"></text></g><g><title>chai`core::ptr::drop_in_place&lt;chai::objectives::Objective&gt; (2 samples, 0.01%)</title><rect x="99.9503%" y="117" width="0.0142%" height="15" fill="rgb(213,79,30)" fg:x="14082" fg:w="2"/><text x="100.2003%" y="127.50"></text></g><g><title>all (14,089 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="14089"/><text x="0.2500%" y="255.50"></text></g><g><title>dyld`start (14,089 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="14089"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>chai`main (14,089 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="14089"/><text x="0.2500%" y="223.50">chai`main</text></g><g><title>chai`std::rt::lang_start_internal (14,089 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="14089"/><text x="0.2500%" y="207.50">chai`std::rt::lang_start_internal</text></g><g><title>chai`std::rt::lang_start::_{{closure}} (14,089 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="14089"/><text x="0.2500%" y="191.50">chai`std::rt::lang_start::_{{closure}}</text></g><g><title>chai`std::sys_common::backtrace::__rust_begin_short_backtrace (14,089 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="14089"/><text x="0.2500%" y="175.50">chai`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>chai`chai::main (14,089 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="14089"/><text x="0.2500%" y="159.50">chai`chai::main</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.9858%" y="133" width="0.0142%" height="15" fill="rgb(207,117,47)" fg:x="14087" fg:w="2"/><text x="100.2358%" y="143.50"></text></g></svg></svg>